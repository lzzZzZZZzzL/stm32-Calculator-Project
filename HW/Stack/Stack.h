/*********************************************************************************************************
* 模块名称：Stack.h
* 摘    要：栈模块
* 当前版本：1.0.0
* 作    者：Lzy
* 完成日期：
* 内    容：
* 注    意：                                                                  
**********************************************************************************************************
* 取代版本：
* 作    者： 
* 完成日期：
* 修改内容：
* 修改文件：
*********************************************************************************************************/
#ifndef _STACK_H_
#define _STACK_H_
/*********************************************************************************************************
*                                              包含头文件
*********************************************************************************************************/
#include "DataType.h"
/*********************************************************************************************************
*                                              宏定义
*********************************************************************************************************/

/*********************************************************************************************************
*                                              枚举结构体定义
*********************************************************************************************************/
// 定义栈的数据类型
typedef float STACK_TYPE;  // 改为浮点数存储

// 定义栈结构体
typedef struct
{
    i16 top;        // 栈顶指针
    i16 maxSize;    // 栈容量
    STACK_TYPE *pBuffer;  // 存储区指针
} StructStack;
/*********************************************************************************************************
*                                              API函数声明
*********************************************************************************************************/
// 栈相关操作函数
void InitStack(StructStack* pStack, STACK_TYPE* pBuf, i16 len); // 初始化栈
void ClearStack(StructStack* pStack);  // 清空栈
u8 StackEmpty(StructStack* pStack);    // 判断栈是否为空，1为空，0为非空
u8 StackFull(StructStack* pStack);     // 判断栈是否已满，1为满，0为非满
u8 PushStack(StructStack* pStack, STACK_TYPE data); // 入栈
u8 PopStack(StructStack* pStack, STACK_TYPE* pData); // 出栈
u8 PeekStack(StructStack* pStack, STACK_TYPE* pData); // 查看栈顶元素

#endif
